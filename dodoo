#!/usr/bin/env bash
POSITIONAL=()

# Used way too often
DCR='docker-compose run --rm'

# Parse input
SUBCOMMAND="$1"; shift

while [ $# -gt 0 ]
do
    key="$1"

    case $key in
        # Most used database names
        --core)
            DBNAME='odoodb'
            shift ;;
        --test)
            NOMIGRATE="-e MIGRATE=False"
            DBNAME='testdb'
            shift ;;
        --scratch)
            NOMIGRATE="-e MIGRATE=False"
            DBNAME='scratch'
            shift ;;

        # Custom name fallback
        -d|--dbname|--database)
            DBNAME="$2"
            shift 2 ;;

        --force)
            FORCE=1
            shift 2 ;;
        --nomig)
            NOMIGRATE="-e MIGRATE=False"
            shift ;;
        -p|--port)
            PORT="$2"
            shift 2 ;;
        -q|--quiet)
            if [ ! -z "$LOG_HANDLER" ]; then
                LOG_HANDLER="$LOG_HANDLER,werkzeug:WARNING"
            else
                LOG_HANDLER="werkzeug:WARNING"
            fi
            shift ;;
        -v|--version)
            VERSION="$2"
            shift 2 ;;
        *)
            POSITIONAL+=("$1")
            shift ;;
    esac
done

# Initialize defaults
setup_defaults() {
    CODE=0
    PORT=${PORT:-'80'}
    DBNAME=${DBNAME:-'odoodb'}
    if [ ! -z "$LOG_HANDLER" ]; then
        LOG_HANDLER="--log-handler=$LOG_HANDLER"
    fi
}

# Define subcommands
run() {
    setup_defaults
    $DCR -e DB_NAME="$DBNAME" ${NOMIGRATE:-} -p "$PORT":8069 odoo odoo --workers=0 ${LOG_HANDLER:-} ${POSITIONAL[@]:-}
}

migrate() {
    setup_defaults
    if [ -z "$DBNAME" ]; then
        echo 'ERROR: No database name given.'
        CODE=1
    fi
    if [ -z "$VERSION" ]; then
        echo 'ERROR: No project version specified.'
        CODE=1
    fi

    # experimental
    if [ "$VERSION" = "latest" ]; then
        VERSION=$(echo $(egrep '^\s+- version:' "$(git rev-parse --show-toplevel)/odoo/migration.yml" | tail -n 1) | cut -d' ' -f3)
    fi

    if [ ! "$CODE" -eq 0 ]; then
        echo
        echo "Usage:   $(basename $0) database_name x.y.z"
        echo "Example: $(basename $0) odoodb 1.2.3"
        return $CODE
    fi

    echo "Requested migration of $DBNAME to version $VERSION, processing..."
    $DCR -e MARABUNTA_FORCE_VERSION=$VERSION -e DB_NAME=$DBNAME odoo migrate
}

scratch() {
    OVERRIDE_DB=${DBNAME:-''}
    setup_defaults
    if [ ! -z "$OVERRIDE_DB" ]; then
        DBNAME=$OVERRIDE_DB
    else
        DBNAME='testdb'
    fi
    MODULES_TO_INSTALL=''
    for i in $POSITIONAL; do
        MODULES_TO_INSTALL="$MODULES_TO_INSTALL -i $i"
    done
    $DCR -e DB_NAME=${DBNAME:='testdb'} odoo testdb-gen -i base $MODULES_TO_INSTALL
}

probe() {
    setup_defaults
    echo "Probing database $DBNAME for $# module(s)..."
    MODULES_TO_PROBE="'$1'"
    shift
    while [ $# -gt 0 ]; do
        MODULES_TO_PROBE="$MODULES_TO_PROBE, '$1'"
        shift
    done
    MODULES_TO_PROBE="($MODULES_TO_PROBE)"
    $DCR odoo psql -c "select id, name, state from ir_module_module where name in $MODULES_TO_PROBE"
}

install() {
    setup_defaults
    MODULES_TO_INSTALL=''
    for i in $POSITIONAL; do
        MODULES_TO_INSTALL="$MODULES_TO_INSTALL -i $i"
    done
    $DCR -e DB_NAME=${DBNAME:='testdb'} -e MIGRATE=False odoo odoo --stop-after-init $MODULES_TO_INSTALL
}

upgrade() {
    setup_defaults
    MODULES_TO_UPGRADE=''
    for i in $POSITIONAL; do
        MODULES_TO_UPGRADE="$MODULES_TO_UPGRADE -u $i"
    done
    $DCR -e DB_NAME=${DBNAME:='testdb'} -e MIGRATE=False odoo odoo --stop-after-init $MODULES_TO_UPGRADE
}

dropdb() {
    setup_defaults
    if [[ "$DBNAME" == "odoodb" && ! $FORCE -eq 1  ]]; then
        echo 'Refusing to drop odoodb; you must call dodoo with --force to do so.'
        exit 1
    fi
    $DCR odoo dropdb $DBNAME
    echo "dodoo: $DBNAME seems to be dropped now."
}

# Run a desired action
if [[ $SUBCOMMAND =~ ^(run|migrate|dropdb|probe|install|upgrade)$ ]]; then
    $SUBCOMMAND
    exit 0
else
    echo "dodoo: $SUBCOMMAND is not a valid subcommand."
    exit 1
fi
