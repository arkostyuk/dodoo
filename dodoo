#!/usr/bin/env bash
POSITIONAL=()

# Used way too often
DCR='docker-compose run --rm'

# Parse input
SUBCOMMAND="$1"; shift

# LOG_HANDLER=""

while [ $# -gt 0 ]
do
    key="$1"

    case $key in
        -d|--dbname)
            DBNAME="$2"; shift; shift ;;
        --force)
            FORCE=1; shift; shift ;;
        -p|--port)
            PORT="$2"; shift; shift ;;
        -q|--quiet)
            if [ ! -z "$LOG_HANDLER" ]; then
                LOG_HANDLER="$LOG_HANDLER,werkzeug:WARNING"
            else
                LOG_HANDLER="werkzeug:WARNING"
            fi
            shift ;;
        -v|--version)
            VERSION="$2"; shift; shift ;;
        *)
            POSITIONAL+=("$1"); shift ;;
    esac
done

# Initialize defaults
PORT=${PORT:-'80'}
DBNAME=${DBNAME:-'odoodb'}
if [ ! -z "$LOG_HANDLER" ]; then
    LOG_HANDLER="--log-handler=$LOG_HANDLER"
fi

# Define subcommands
run() {
    $DCR -e DB_NAME="$DBNAME" -p "$PORT":8069 odoo odoo --workers=0 ${LOG_HANDLER:-} ${POSITIONAL[@]:-}
}

migrate() {
    CODE=0
    if [ -z "$DBNAME" ]; then
        echo 'ERROR: No database name given.'
        CODE=1
    fi
    if [ -z "$VERSION" ]; then
        echo 'ERROR: No project version specified.'
        CODE=1
    fi

    # experimental
    if [ "$VERSION" = "latest" ]; then
        VERSION=$(echo $(egrep '^\s+- version:' "$(git rev-parse --show-toplevel)/odoo/migration.yml" | tail -n 1) | cut -d' ' -f3)
    fi

    if [ ! "$CODE" -eq 0 ]; then
        echo
        echo "Usage:   dcmig database_name x.y.z"
        echo "Example: dcmig odoodb 1.2.3"
        return $CODE
    fi

    echo "Requested migration of $DBNAME to version $VERSION, processing..."
    $DCR -e MARABUNTA_FORCE_VERSION=$VERSION -e DB_NAME=$DBNAME odoo migrate
}

dropdb() {
    if [[ "$DBNAME" == "odoodb" && ! $FORCE -eq 1  ]]; then
        echo 'Refusing to drop odoodb; you must call dodoo with --force to do so.'
        exit 1
    fi
    $DCR odoo odoo dropdb $DBNAME
}

# Run a desired action
if [[ $SUBCOMMAND =~ ^(run|migrate|dropdb)$ ]]; then
    $SUBCOMMAND
    exit 0
else
    echo "dodoo: $SUBCOMMAND is not a valid subcommand."
    exit 1
fi
