#!/usr/bin/env bash
POSITIONAL=()

# Used way too often
DCR='docker-compose run --rm'

# Basename
SELF="$(basename $0)"
GIT_ROOT="$(git rev-parse --show-toplevel)"

# Running context
GIT_CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ "$GIT_CURRENT_BRANCH" == "HEAD" ]]; then
    GIT_CURRENT_BRANCH='scratch'
else
    if [[ "$GIT_CURRENT_BRANCH" == "master" ]]; then
        GIT_CURRENT_BRANCH='odoodb'
    fi
fi

# Parse input
SUBCOMMAND="$1"; shift

while [ $# -gt 0 ]
do
    key="$1"

    case $key in
        # Most used database names
        --core)
            DBNAME='odoodb'
            shift ;;
        --test)
            DBNAME='testdb'
            shift ;;
        --scratch)
            DBNAME='scratch'
            shift ;;
        --curr)
            DBNAME="$GIT_CURRENT_BRANCH"
            shift ;;

        # Custom name fallback
        -d|--dbname|--database)
            DBNAME="$2"
            shift 2 ;;

        --dry)
            DRYRUN=1
            shift ;;
        --force)
            FORCE=1
            shift ;;
        --nomig)
            NOMIGRATE="-e MIGRATE=False"
            shift ;;
        -p|--port)
            PORT="$2"
            shift 2 ;;
        -q|--quiet)
            if [ ! -z "$LOG_HANDLER" ]; then
                LOG_HANDLER="$LOG_HANDLER,werkzeug:WARNING"
            else
                LOG_HANDLER="werkzeug:WARNING"
            fi
            shift ;;
        -v|--version)
            VERSION="$2"
            shift 2 ;;
        *)
            POSITIONAL+=("$1")
            shift ;;
    esac
done

# Initialize defaults
setup_defaults() {
    CODE=0
    : ${PORT:='80'}
    : ${DBNAME:=$GIT_CURRENT_BRANCH}
    # : ${NOMIGRATE:=0}
    if [[ 'scratch test' =~ "$DBNAME" ]]; then
        NOMIGRATE="-e MIGRATE=False"
    fi
    if [ ! -z "$LOG_HANDLER" ]; then
        LOG_HANDLER="--log-handler=$LOG_HANDLER"
    fi
}

# Define subcommands
run() {
    setup_defaults
    dodoo_execute "$DCR -e DB_NAME=$DBNAME ${NOMIGRATE:-} -p $PORT:8069 odoo odoo --workers=0 ${LOG_HANDLER:-} $@"
}

migrate() {
    if [[ -z "$DBNAME" ]]; then
        DBNAME=$1
        shift
    fi
    VERSION=$1
    CODE=0

    if [ "$VERSION" = "latest" ]; then
        VERSION=$(echo $(egrep '^\s+- version:' "$GIT_ROOT/odoo/migration.yml" | tail -n 1) | cut -d' ' -f3)
    fi

    if [ ! "$CODE" -eq 0 ]; then
        echo
        echo "Usage:   $SELF database_name x.y.z"
        echo "Example: $SELF odoodb 1.2.3"
        return $CODE
    fi

    if [[ -z "$DBNAME" || -z "$VERSION" ]]; then
        echo Nope.
        exit 1
    fi
    echo "$SELF: Requested migration of $DBNAME to version $VERSION, processing..."
    dodoo_execute "$DCR -e MARABUNTA_FORCE_VERSION=$VERSION -e DB_NAME=$DBNAME odoo migrate"
}

scratch() {
    OVERRIDE_DB=${DBNAME:-''}
    setup_defaults
    if [ ! -z "$OVERRIDE_DB" ]; then
        DBNAME=$OVERRIDE_DB
    else
        DBNAME='scratch'
    fi
    while [ $# -gt 0 ]; do
        MODULES_TO_INSTALL="$MODULES_TO_INSTALL,$1"
        shift
    done
    dodoo_execute "$DCR -e DB_NAME=${DBNAME:='testdb'} odoo testdb-gen -i base$MODULES_TO_INSTALL"
}

probe() {
    if [ $# -eq 0 ]; then
        echo "$SELF: No module names provided, providing common feedback."
        psql -c 'select state, count(state) from ir_module_module group by state'
        # dodoo_execute "$DCR odoo psql --command='select state, count(state) from ir_module_module group by state'"
        exit 0
    fi
    setup_defaults
    echo "$SELF: Probing database $DBNAME for $# module(s)..."
    MODULES_TO_PROBE="'$1'"
    shift
    while [ $# -gt 0 ]; do
        MODULES_TO_PROBE="$MODULES_TO_PROBE, '$1'"
        shift
    done
    CCC="--command='select id, name, state from ir_module_module where name in ($MODULES_TO_PROBE)"
    dodoo_execute "$DCR odoo psql $DBNAME odoo" $CCC
}

install() {
    setup_defaults
    MODULES_TO_INSTALL=''
    while [ $# -gt 0 ]; do
        MODULES_TO_INSTALL="$MODULES_TO_INSTALL-i $1 "
        shift
    done
    dodoo_execute "$DCR -e DB_NAME=${DBNAME:='testdb'} -e MIGRATE=False odoo odoo --stop-after-init $MODULES_TO_INSTALL"
}

upgrade() {
    setup_defaults
    MODULES_TO_UPGRADE=''
    while [ $# -gt 0 ]; do
        MODULES_TO_UPGRADE="$MODULES_TO_UPGRADE-u $1 "
        shift
    done
    dodoo_execute "$DCR -e DB_NAME=${DBNAME:='testdb'} -e MIGRATE=False odoo odoo --stop-after-init $MODULES_TO_UPGRADE"
}

dropdb() {
    setup_defaults
    if [ ! -z "$1" ]; then
        DBNAME=$1
    fi
    if [[ "$DBNAME" == "odoodb" && ! $FORCE -eq 1 ]]; then
        echo "$SELF: Refusing to drop odoodb; you must call dodoo with --force to do so."
        exit 1
    fi
    dodoo_execute "$DCR odoo dropdb $DBNAME"
    if [ $? -eq 0 ]; then
        echo "$SELF: $DBNAME seems to be dropped now."
    fi
}

shell() {
    setup_defaults
    dodoo_execute "$DCR -e DB_NAME=$DBNAME -e MIGRATE=False odoo odoo shell --shell-interface=ipython"
}

psql() {
    setup_defaults
    dodoo_execute "$DCR odoo psql $DBNAME odoo $@"
}

dblist() {
    psql -l
}

pytest() {
    if [ $1 == '--recreate' ]; then
        RECREATE=1
        shift
    fi

    # Where do we run?
    case $1 in
        # optionally prepend all suites with those base paths
        -e|--ex|--external)
            TESTING_RANGE='odoo/external-src/'
            shift ;;
        -l|--lo|--local)
            TESTING_RANGE='odoo/local-src/'
            shift ;;
        -b|--ba|--base)
            TESTING_RANGE='odoo/src/'
            shift ;;
        -s|--smart)
            SMART=1
            shift ;;
        # else: provide full paths
    esac

    # resolve a database to run tests onto
    DBNAME=${DBNAME:='testdb'}
    if [[ "$DBNAME" == "odoodb" && -z "$FORCE" ]]; then
        echo "$SELF: Refusing to run tests on odoodb; please provide test database name or use --force."
        exit 1
    fi

    # Positionals contain test suites now
    TESTSUITES=''
    while [ $# -gt 0 ]; do
        if [ ! -z "$SMART" ]; then
            MODULE="$(find odoo -name $1 ! -wholename '*/setup/*')"
            if [[ -z "$MODULE" ]]; then
                echo "$SELF: Nothing to test, sry m8 :("
                exit 1
            fi
        else
            MODULE="$TESTING_RANGE$1"
        fi
        TESTSUITES="$TESTSUITES$MODULE "
        shift
    done

    if [ ! -z "$RECREATE" ]; then
        shift
        TO_INSTALL=''
        for MODNAME in $TESTSUITES; do
            TO_INSTALL="$TO_INSTALL $(basename $MODNAME)"
        done

        if [[ -z "$TESTSUITES" ]]; then
            echo "$SELF: Nothing to reinstall, abort."
            exit 1
        fi

        dropdb
        scratch $TO_INSTALL
    fi

    echo "$SELF: Testing $TESTSUITES..."
    dodoo_execute "$DCR -e DB_NAME=$DBNAME odoo pytest -s ${TESTSUITES:-}"
}

sing() {
    setup_defaults
    dodoo_execute "$DCR -e DB_NAME=$DBNAME odoo anthem $@"
}

runtests() {
    setup_defaults
    dodoo_execute "$DCR -e DB_NAME=$DBNAME odoo runtests $@"
}

dodoo_execute() {
    if [[ ! -z $# ]]; then
        if [[ -z "$DRYRUN" ]]; then
            echo -e "\e[36m\e[1m:: $SELF: EXECUTING\e[39m $@\e[0m"
            $@
        else
            echo -e "\e[36m\e[1m:: $SELF: WOULD EXECUTE\e[39m $@\e[0m"
        fi
    fi
}

clone() {
    : ${DBNAME:=$GIT_CURRENT_BRANCH}
    dodoo_execute "$DCR odoo createdb -T odoodb $DBNAME $@"
    if [[ "$?" -ne "0" ]]; then
        exit $?
    fi
    dodoo_execute "$DCR odoo cp -rf /data/odoo/filestore/odoodb /data/odoo/filestore/$DBNAME"
    migrate latest
}

# Run a desired action
if [ $SUBCOMMAND == 'dodoo_execute' ]; then
    echo "$SELF: dodoo_execute is an internal command."
    exit 1
fi
$SUBCOMMAND ${POSITIONAL[@]}
CODE=$?
if [ $CODE -ne 0 ]; then
    echo -e "\e[36m\e[1m:: Usage:\e[0m"
    echo "Working on it :D"
    exit $CODE
fi
